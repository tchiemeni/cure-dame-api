<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\DiscussionRequest;
use App\Notifications\RequestTakenAction;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\Rule;

class DiscussionRequestController extends Controller
{
    /**
     * CrÃ©e une nouvelle requÃªte de discussion.
     * ROUTE: POST /api/discussion-requests (ProtÃ©gÃ©e par auth:sanctum)
     */
    public function store(Request $request)
    {
        // 1. Validation des donnÃ©es
        $request->validate([
            'subject' => 'required|string|max:255',
            'message' => 'required|string',
        ]);

        // 2. CrÃ©ation de la requÃªte
        $requestData = [
            'user_id' => $request->user()->id, // L'ID de l'utilisateur connectÃ©
            'subject' => $request->subject,
            'message' => $request->message,
            'status' => 'pending', // Statut par dÃ©faut
        ];

        $discussionRequest = DiscussionRequest::create($requestData);

        return response()->json([
            'message' => 'Votre demande de discussion a Ã©tÃ© soumise. Un homme de Dieu vous contactera bientÃ´t.',
            'request' => $discussionRequest
        ], 201);
    }

    /**
     * Affiche les requÃªtes soumises par l'utilisateur connectÃ©.
     * ROUTE: GET /api/discussion-requests/me (ProtÃ©gÃ©e)
     */
    public function userRequests(Request $request)
    {
        $requests = DiscussionRequest::where('user_id', $request->user()->id)
                                     ->latest()
                                     ->get();

        return response()->json($requests);
    }

    // --- MÃ©thodes pour l'administration (optionnelles mais cruciales) ---

    // Pour gÃ©rer ces requÃªtes, vous auriez besoin d'une validation isAdmin

    /**
     * Affiche toutes les requÃªtes (pour l'administration).
     * ROUTE: GET /api/admin/discussion-requests (NÃ©cessite une route et un middleware Admin)
     */
    public function indexAdmin()
    {
       // ðŸš¨ Logique pour charger toutes les requÃªtes avec la relation 'user' ðŸš¨

    // Le 'where' n'est pas nÃ©cessaire ici, car l'admin voit tout.
    $requests = DiscussionRequest::with('user')
                ->latest() // Les plus rÃ©centes en premier
                ->get();

    // Optionnel: utiliser une Resource pour formater la rÃ©ponse si nÃ©cessaire
    return response()->json($requests);
    }

    /**
     * Met Ã  jour le statut d'une requÃªte (pour l'administration).
     * ROUTE: PUT/PATCH /api/discussion-requests/{discussionRequest}
     */
    public function update(Request $request, DiscussionRequest $discussionRequest)
    {
        // Dans un cas rÃ©el, vÃ©rifiez is_admin ici!

        $request->validate([
            'status' => ['required', Rule::in(['pending', 'in_progress', 'resolved'])],
        ]);

        $discussionRequest->update([
            'status' => $request->status,
        ]);

        return response()->json([
            'message' => 'Statut de la requÃªte mis Ã  jour.',
            'request' => $discussionRequest
        ]);
    }

   public function takeAction(DiscussionRequest $request)
{
    // ðŸš¨ 1. VÃ‰RIFICATION DU STATUT DE LA REQUÃŠTE ðŸš¨
    // Si la requÃªte n'est pas "pending", on ne fait rien et on envoie un statut d'Ã©chec
    if ($request->status !== 'pending') {
        return response()->json([
            'message' => 'Cette requÃªte a dÃ©jÃ  Ã©tÃ© prise en charge ou rÃ©solue.'
        ], 400); // 400 Bad Request est appropriÃ© ici.
    }

    // L'utilisateur authentifiÃ© (l'Admin) est dÃ©jÃ  vÃ©rifiÃ© par le middleware 'admin' sur la route.
    // La vÃ©rification $request->user()->isAdmin() est redondante ici, car vous Ãªtes
    // dans une route sÃ©curisÃ©e par un middleware d'administration.

    // 2. Mise Ã  jour du statut
    $request->status = 'in_progress';
    $request->save();

    try {
        // ðŸš¨ 3. ENVOI SÃ‰CURISÃ‰ DE LA NOTIFICATION ðŸš¨
        // On utilise la relation ($request->user) pour accÃ©der Ã  l'utilisateur liÃ©
        // Assurez-vous que l'utilisateur est chargÃ© via Route Model Binding ou with('user')
        $request->user->notify(new RequestTakenAction($request));
    } catch (\Exception $e) {
        // En cas d'Ã©chec de l'envoi de courriel, on peut logger l'erreur
        // mais on retourne quand mÃªme un succÃ¨s pour l'action BDD
        Log::error("Erreur lors de l'envoi de la notification pour Request ID {$request->id}: " . $e->getMessage());
        // Vous pouvez choisir de relancer l'exception si l'Ã©chec de l'email est critique
    }

    // Retourne la ressource mise Ã  jour
    // Le front-end a besoin de l'objet mis Ã  jour pour rafraÃ®chir la liste
    return response()->json($request);
}
}
